$date
	Fri Jul 12 14:38:12 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb $end
$var wire 8 ! mux_out [7:0] $end
$var reg 8 " P_reverse [7:0] $end
$var reg 1 # clk $end
$var reg 8 $ input_a [7:0] $end
$scope module modulo_adder $end
$var wire 8 % P_reverse [7:0] $end
$var wire 1 # clk $end
$var wire 8 & input_a [7:0] $end
$var wire 1 ' sum2_out_carry $end
$var wire 8 ( sum2_out [7:0] $end
$var wire 8 ) sum1_out [7:0] $end
$var wire 1 * sum1_carry $end
$var wire 1 + reg9_out_carry $end
$var wire 8 , reg9_out_8 [7:0] $end
$var wire 8 - reg16_out_b [7:0] $end
$var wire 8 . reg16_out_a [7:0] $end
$var wire 8 / mux_out [7:0] $end
$scope module Adder_9 $end
$var wire 9 0 a [8:0] $end
$var wire 9 1 b [8:0] $end
$var wire 1 2 cin $end
$var wire 8 3 out [7:0] $end
$var wire 1 4 carry9 $end
$var wire 1 ' carry10 $end
$upscope $end
$scope module Multiplexer2to1 $end
$var wire 1 ' control $end
$var wire 8 5 input_from_sum [7:0] $end
$var wire 8 6 out [7:0] $end
$var wire 8 7 input_from_reg9 [7:0] $end
$upscope $end
$scope module adder_8 $end
$var wire 8 8 out [7:0] $end
$var wire 1 * carry $end
$var wire 8 9 b [7:0] $end
$var wire 8 : a [7:0] $end
$upscope $end
$scope module reg9Bit $end
$var wire 1 # clk $end
$var wire 9 ; data_in [8:0] $end
$var reg 1 + data_out_1bit $end
$var reg 8 < data_out_8bit [7:0] $end
$upscope $end
$scope module reg_16_bit $end
$var wire 1 # clk $end
$var wire 8 = input_a [7:0] $end
$var wire 8 > input_b [7:0] $end
$var reg 1 ? first_clk $end
$var reg 8 @ out_a [7:0] $end
$var reg 8 A out_b [7:0] $end
$var reg 1 B second_clk $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0B
b0 A
bx @
1?
bx >
bx =
bx <
bx ;
bx :
b0 9
bx 8
bx 7
bx 6
bx 5
x4
bx 3
12
b100100011 1
bx 0
bx /
bx .
b0 -
bx ,
x+
x*
bx )
bx (
x'
bx &
b100011 %
bx $
0#
b100011 "
bx !
$end
#5
b11011011 )
b11011011 8
b11011011 ;
0*
b11011011 .
b11011011 :
b11011011 @
1B
0?
b100110111 1
b110111 "
b110111 %
b11011011 $
b11011011 &
b11011011 =
1#
#10
0#
#15
b11011011 !
b11011011 /
b11011011 6
b11011011 >
b11111111 (
b11111111 3
b11111111 5
14
0'
b10101010 ;
b10101010 )
b10101010 8
b100100011 1
b100011 "
b100011 %
0+
b11011011 0
b11011011 ,
b11011011 7
b11011011 <
b10101010 .
b10101010 :
b10101010 @
0B
1#
b10101010 $
b10101010 &
b10101010 =
#20
0#
#25
1*
b110110101 ;
b10110101 )
b10110101 8
b10101010 !
b10101010 /
b10101010 6
b10101010 >
b11100010 (
b11100010 3
b11100010 5
b11011011 -
b11011011 9
b11011011 A
b11011010 .
b11011010 :
b11011010 @
b10101010 0
b10101010 ,
b10101010 7
b10101010 <
b100110111 1
b110111 "
b110111 %
1#
b11011010 $
b11011010 &
b11011010 =
#30
0#
#35
04
1'
b11011001 !
b11011001 /
b11011001 6
b11011001 >
b11011001 (
b11011001 3
b11011001 5
b101110001 ;
b1110001 )
b1110001 8
b100100011 1
b100011 "
b100011 %
1+
b110110101 0
b10110101 ,
b10110101 7
b10110101 <
b10101010 -
b10101010 9
b10101010 A
b11000111 .
b11000111 :
b11000111 @
1#
b11000111 $
b11000111 &
b11000111 =
#40
0#
#45
b10101001 !
b10101001 /
b10101001 6
b10101001 >
b101010011 ;
b1010011 )
b1010011 8
b10101001 (
b10101001 3
b10101001 5
b11011001 -
b11011001 9
b11011001 A
b1111010 .
b1111010 :
b1111010 @
b101110001 0
b1110001 ,
b1110001 7
b1110001 <
b100110111 1
b110111 "
b110111 %
1#
b1111010 $
b1111010 &
b1111010 =
#50
0#
#55
b1110111 !
b1110111 /
b1110111 6
b1110111 >
b1110111 (
b1110111 3
b1110111 5
b101001010 ;
b1001010 )
b1001010 8
b100100011 1
b100011 "
b100011 %
b101010011 0
b1010011 ,
b1010011 7
b1010011 <
b10101001 -
b10101001 9
b10101001 A
b10100001 .
b10100001 :
b10100001 @
1#
b10100001 $
b10100001 &
b10100001 =
#60
0#
#65
b10000010 !
b10000010 /
b10000010 6
b10000010 >
b100000010 ;
b10 )
b10 8
b10000010 (
b10000010 3
b10000010 5
b1110111 -
b1110111 9
b1110111 A
b10001011 .
b10001011 :
b10001011 @
b101001010 0
b1001010 ,
b1001010 7
b1001010 <
b100110111 1
b110111 "
b110111 %
1#
b10001011 $
b10001011 &
b10001011 =
#70
0#
#75
b100110 !
b100110 /
b100110 6
b100110 >
b100110 (
b100110 3
b100110 5
b100110100 ;
b110100 )
b110100 8
b100100011 1
b100011 "
b100011 %
b100000010 0
b10 ,
b10 7
b10 <
b10000010 -
b10000010 9
b10000010 A
b10110010 .
b10110010 :
b10110010 @
1#
b10110010 $
b10110010 &
b10110010 =
#80
0#
#85
b1101100 !
b1101100 /
b1101100 6
b1101100 >
b110001 )
b110001 8
b110001 ;
0*
b1101100 (
b1101100 3
b1101100 5
b100110 -
b100110 9
b100110 A
b1011 .
b1011 :
b1011 @
b100110100 0
b110100 ,
b110100 7
b110100 <
b100110111 1
b110111 "
b110111 %
1#
b1011 $
b1011 &
b1011 =
#90
0#
#95
b110001 !
b110001 /
b110001 6
b110001 >
14
0'
b1010101 (
b1010101 3
b1010101 5
1*
b100101111 ;
b101111 )
b101111 8
b100100011 1
b100011 "
b100011 %
0+
b110001 0
b110001 ,
b110001 7
b110001 <
b1101100 -
b1101100 9
b1101100 A
b11000011 .
b11000011 :
b11000011 @
1#
b11000011 $
b11000011 &
b11000011 =
#100
0#
#105
0*
b11011110 ;
b11011110 )
b11011110 8
04
1'
b1100111 !
b1100111 /
b1100111 6
b1100111 >
b1100111 (
b1100111 3
b1100111 5
b110001 -
b110001 9
b110001 A
b10101101 .
b10101101 :
b10101101 @
1+
b100101111 0
b101111 ,
b101111 7
b101111 <
b100110111 1
b110111 "
b110111 %
1#
b10101101 $
b10101101 &
b10101101 =
#110
0#
#115
b10 !
b10 /
b10 6
b10 >
b10 (
b10 3
b10 5
1*
b100010101 ;
b10101 )
b10101 8
b100100011 1
b100011 "
b100011 %
0+
b11011110 0
b11011110 ,
b11011110 7
b11011110 <
b1100111 -
b1100111 9
b1100111 A
b10101110 .
b10101110 :
b10101110 @
1#
b10101110 $
b10101110 &
b10101110 =
#120
0#
#125
b1001101 !
b1001101 /
b1001101 6
b1001101 >
b10110000 )
b10110000 8
b10110000 ;
0*
b1001101 (
b1001101 3
b1001101 5
b10 -
b10 9
b10 A
1+
b100010101 0
b10101 ,
b10101 7
b10101 <
b100110111 1
b110111 "
b110111 %
1#
